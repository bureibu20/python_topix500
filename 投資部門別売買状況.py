# -*- coding: utf-8 -*-
"""投資部門別売買状況.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mmnlyCtymuJ_Z4y1A0SxWo1AjFCacmZu
"""

import requests
import pandas as pd
from urllib.request import urlopen
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np

#pandasの列表示上限を設定
pd.get_option("display.max_columns")
pd.set_option('display.max_columns', 50)

url = 'https://www.jpx.co.jp/markets/statistics-equities/investor-type/index.html'
html = urlopen(url)
bsObj = BeautifulSoup(html, "html.parser")
bsObj

table = bsObj.findAll("table")[0]
table

rows = table.findAll("tr")[1]#表の１行目を狙い撃ち
rows

for r in rows:
  try:
    tds = r.findAll("td")
    print(tds)
  except AttributeError as e:
    print(e)

# for td in tds[1:]:
#   lnk = td.a.get("href")
#   print(lnk)

# if str(lnk).find('equities')>0 and str(lnk).find('xls')>0 and str(lnk).find('val')>0:
#   print(lnk)

# def fn_eqty(pth,si):
#     #URL指定
#     url = 'https://www.jpx.co.jp/' + pth
#     print(url , si)

#     #データの読み込み(excel)
#     df = pd.read_excel(url,  sheet_name=si)

#     #期間日付、取引金額単位、市場名の取得
#     mkt = df.iloc[4,0]
#     mkt = str(mkt).replace('総売買代金', '')
#     prd = df.iloc[2,0] 
#     ymw = prd[:10]
#     unit = df.iloc[3,10] 
#     unit = unit.split(',')[0]
#     unit = str(unit)
#     print(prd ,ymw, unit ,mkt)

#     #整形：データの絞り込み
#     df = df[11:63] 
#     df.columns = ['a', 'b', 'c', 'd', 'e', 'f','g','h','i','j','k']
#     df = df.drop(['c', 'd', 'e', 'f','g','h','j' ,'k'], axis=1) #'k'は検算確認用、DBに格納する場合は'k'は削除
#     df = df[df['b']!='合計']
#     df = df.dropna(subset=['i'])
#     df = df.dropna(how='all')

#     #値の置換
#     dct = {'Proprietary': '自己計', 'Brokerage': '委託計', 'Total':'総　計', 'Institutions': '法　人'
#           , 'Individuals': '個　人', 'Foreigners':'海外投資家','Securities Cos.':'証券会社'
#           , 'Investment': '投資信託',  'Business Cos.':'事業法人', 'Other Cos.': 'その他法人等'
#           , 'Financial': '金融機関', 'Life & Non-Life':'生保・損保', 'City & Regional BK':'都銀・地銀等'
#           , 'Trust BK': '信託銀行',  'Other Financials':'その他金融機関'}
#     #df.a = df.a.replace(dct)
#     df["a"] = df["a"].replace(dct)

#     #整形：データの絞り込みや列名設定
#     df = df.query("a not in ['委託計', '総　計', '法　人', '金融機関']")
#     df.columns = ['clsfctn', 'bysl', 'vle'] #'diff' 
#     df = df.reset_index()

#     #期間日付、取引金額単位、市場名がセットされたデータフレームを生成
#     df2 = pd.DataFrame([[prd,ymw,unit,mkt ]]*len(df))
#     df2.columns = [ 'prd', 'ymw' ,'unit', 'mkt' ]

#     #dfの結合
#     df = pd.concat([df, df2], axis=1)
#     print( df )

#     ### to_sql()でHerokuのPostgreSQLの任意のテーブルにデータ格納： 割愛！ ### 

#     #dfの集計: wide_formに変換
#     df3 = df.pivot(index='clsfctn', columns='bysl', values='vle')
#     df3 = df3.apply(lambda x: x.str.replace(',','')).astype(np.int)  #カンマ表記のString型をint型に変換
#     df3['sum'] = df3['買い'] + df3['売り'] #合算
#     df3['dif'] = df3['買い'] - df3['売り'] #減算

#     #並び替え:部門
#     d_order = {'自己計': 0, '個　人': 1, '海外投資家': 2, '証券会社': 3
#                , '投資信託': 4, '事業法人': 5, 'その他法人等': 6, '生保・損保': 7
#                , '都銀・地銀等': 8, '信託銀行': 9, 'その他金融機関': 10}

#     df3['order'] = df3.index.map(d_order)
#     df3 = df3.sort_values('order')
#     #列名設定
#     df3.columns = ['sell', 'buy', 'sum' ,'dif' , 'order' ]
#     display(df3)

# if str(lnk).find('equities')>0 and str(lnk).find('xls')>0 and str(lnk).find('val')>0:
#   #[si]0:東証1部、1:東証2部、2:マザーズ、3:Jasdaq、4:2市場[東証＆名証]
#   x=[fn_eqty(lnk ,si) for si in range(0,5)]

